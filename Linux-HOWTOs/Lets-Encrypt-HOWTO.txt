===================
Let's Encrypt HOWTO (c) Nicolas Kovacs <info@microlinux.fr>
===================

Dernière révision : 8 janvier 2016

Ce HOWTO décrit l'utilisation de Let's Encrypt sur un serveur Slackware Linux.


  * Introduction
  * Let's Encrypt
  * Installation
  * Plug-ins
  * Générer un certificat
  * Configurer Apache
  * Renouveler un certificat
  * Certificats et permissions
  * Automatiser la procédure
  * Révoquer un certificat
  * Effectuer des tests


Introduction
------------

Un certificat électronique peut être vu comme une carte d'identité numérique. Il est
utilisé principalement :

  * pour identifier et authentifier une personne physique ou morale ;
  
  * pour chiffrer des échanges.

Il est signé par un tiers de confiance qui atteste du lien entre l'identité
physique et l'entité numérique. Le standard le plus utilisé pour la création
des certificats numériques est le X.509.


Let's Encrypt
-------------

Let's Encrypt est une autorité de certification lancée le 3 décembre 2015 en
version bêta publique. Elle fournit des certificats SSL/TLS gratuits grâce à
un client installé sur le serveur qui automatise la plupart des tâches. On
n'est donc plus obligé de payer une fortune et/ou de sauter à travers des
cerceaux en feu pour créer et renouveler les certificats. 

Les certificats générés avec Let's Encrypt sont reconnus par l'ensemble des
navigateurs Web modernes. Cette technologie repose sur le protocole ACME
("Automated Certificate Management Environment").


Installation
------------

Le dépôt SlackBuilds.org fournit un script pour construire et installer le
paquet 'letsencrypt'. Il dépend d'une quantité importante de modules Python.
Sur mes serveurs tournant sous Slackware64 14.0 et 14.1, j'ai dû en installer
pas moins de vingt-sept. Les dépendances sont toutes disponibles sur
SlackBuilds.org.  

Voici l'ordre dans lequel on peut construire les paquets :

  1.  psutil
  2.  pysetuptools
  3.  pytz
  4.  werkzeug
  5.  mock
  6.  configobj
  7.  pyparsing
  8.  zope.interface
  9.  zope.event
  10. zope.component
  11. pycparser
  12. ipaddress
  13. enum34
  14. six
  15. idna
  16. cffi
  17. pyasn1
  18. cryptography
  19. pyOpenSSL
  20. ndg_httpsclient
  21. python2-pythondialog
  22. augeas
  23. python-augeas
  24. python-requests
  25. pyrfc3339
  26. python-parsedatetime
  27. python-configparse
  28. letsencrypt


Plug-ins
--------

Le client Let's Encrypt supporte une série de plug-ins pour Apache et Nginx.
Pour l'instant, ces plug-ins fonctionnent uniquement sous Debian. On se
contentera donc du plug-in Standalone, qui fonctionne très bien sous
Slackware.

Afficher les plug-ins installés :

  # letsencrypt plugins
  * webroot
  Description: Webroot Authenticator
  Interfaces: IAuthenticator, IPlugin
  Entry point: webroot = letsencrypt.plugins.webroot:Authenticator
  * standalone
  Description: Automatically use a temporary webserver
  Interfaces: IAuthenticator, IPlugin
  Entry point: standalone = letsencrypt.plugins.standalone:Authenticator


Générer un certificat
---------------------

Pour commencer, nous allons générer un certificat pour le domaine
'scholae.fr'. Étant donné que la requête utilise le port 443, il faut d'abord
arrêter le serveur Web :

  # /etc/rc.d/rc.httpd stop

Invoquons la commande suivante :

  # letsencrypt certonly --standalone-supported-challenges tls-sni-01 \
    --email info@microlinux.fr --renew-by-default --agree-tos --text \
    --standalone -d www.scholae.fr -d scholae.fr \
    --webroot-path /srv/httpd/vhosts/scholae-secure/htdocs

Si tout se passe bien, nous recevons la réponse suivante :

   - Congratulations! Your certificate and chain have been saved at
     /etc/letsencrypt/live/www.scholae.fr/fullchain.pem. Your cert will
     expire on 2016-03-28. To obtain a new version of the certificate in
     the future, simply run Let's Encrypt again.
   - Your account credentials have been saved in your Let's Encrypt
     configuration directory at /etc/letsencrypt. You should make a
     secure backup of this folder now. This configuration directory will
     also contain certificates and private keys obtained by Let's
     Encrypt so making regular backups of this folder is ideal.
  
Les fichiers générés se trouvent tous dans le répertoire
'/etc/letsencrypt/live/<domaine>'. On va donc jeter un oeil :

  # ls -1 /etc/letsencrypt/live/www.scholae.fr/
  cert.pem  
  chain.pem  
  fullchain.pem  
  privkey.pem

À quoi correspondent ces fichiers ?

  * privkey.pem - C'est la clé privée pour le certificat. Ce fichier ne doit
    surtout pas être divulgué. Le serveur doit pouvoir y accéder pour que
    SSL/TLS fonctionne. C'est ce qu'Apache utilisera comme fichier
    'SSLCertificateKeyFile'.

  * cert.pem - Le certificat du serveur. C'est ce qui correspond au
    'SSLCertificateFile' d'Apache.

  * chain.pem - Les certificats requis par le navigateur hormis le certificat
    du serveur. Requis par Apache < 2.4.8 pour le 'SSLCertificateChainFile'. 

  * fullchain.pem - Tous les certificats, y compris celui du serveur. Il
    s'agit là de la concaténation de 'chain.pem' et de 'cert.pem'. C'est
    requis par Apache >= 2.4.8 pour le 'SSLCertificateFile'. 


Configurer Apache
-----------------

Éditer la stance correspondante dans '/etc/httpd/extra/httpd-ssl.conf' comme
ceci :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------
<VirtualHost 62.210.209.120:443>
DocumentRoot "/srv/httpd/vhosts/scholae-secure/htdocs"
...
SLCertificateFile "/etc/letsencrypt/live/www.scholae.fr/cert.pem"
SSLCertificateKeyFile "/etc/letsencrypt/live/www.scholae.fr/privkey.pem"
SSLCertificateChainFile "/etc/letsencrypt/live/www.scholae.fr/fullchain.pem"
...
</VirtualHost>
--8<--------------------------------------------------------------------------

Relancer Apache pour prendre en compte les modifications.


Renouveler un certificat
------------------------

La durée de vie d'un certificat est de 90 jours, ce qui n'est pas beaucoup.
Pour prolonger la validité d'un certificat, il suffit de le renouveler en
réinvoquant exactement la même commande utilisée pour le générer initialement.


Certificats et permissions
--------------------------

Si l'on souhaite utiliser plusieurs applications sécurisées pour un même
domaine (Web, courrier, messagerie XMPP), on se retrouve confronté à un
problème de permissions. Concrètement, si le serveur Web ainsi que le serveur
de messagerie Prosody doivent accéder en lecture au certificat et à la clé
privée, on peut utiliser la solution qui suit.

On crée un groupe système 'certs', on ajoute les utilisateurs système
respectifs à ce groupe et on règle les permissions des fichiers en fonction,
c'est-à-dire root:certs. Concrètement :

  # useradd -g 240 certs
  # chgrp -R certs /etc/letsencrypt
  # chmod -R g=rx /etc/letsencrypt

Si l'on souhaite qu'une application accède au certificat et à la clé privée,
il suffit qu'on ajoute l'utilisateur correspondant au groupe système 'certs'.
Exemple pour la messagerie XMPP Prosody :

  # usermod -a -G certs prosody

Notez que ce n'est pas la peine d'ajouter l'utilisateur 'apache' au groupe
'certs'. Au démarrage, le serveur Apache s'exécute avec les droits root, puis
lance une série de processus enfants avec des droits restreints :

  # ps aux | grep httpd | grep -v grep
  root   3168 0.0 0.2 130500  4304 ?  Ss  08:13   0:00 /usr/sbin/httpd -k start
  apache 3169 0.0 0.2 878216  5968 ?  Sl  08:13   0:01 /usr/sbin/httpd -k start
  apache 3170 0.0 0.3 878216  6672 ?  Sl  08:13   0:01 /usr/sbin/httpd -k start
  apache 3171 0.0 0.3 878216  6488 ?  Sl  08:13   0:01 /usr/sbin/httpd -k start
  apache 3254 0.0 0.3 878216  6556 ?  Sl  08:14   0:01 /usr/sbin/httpd -k start


Automatiser la procédure
------------------------

La procédure de génération et de renouvellement peut être automatisée à l'aide
d'un petit script. Par exemple :

--8<---------- mkcert-scholae.fr.sh ------------------------------------------
#!/bin/bash
#
# Create/renew SSL/TLS certificates for scholae.fr

ENCRYPT="/usr/bin/letsencrypt"
CHGRP="/usr/bin/chgrp"
CHMOD="/usr/bin/chmod"
CERTGRP="certs"
EMAIL="info@microlinux.fr"
OPTIONS="certonly \
         --standalone-supported-challenges tls-sni-01 \
         --email $EMAIL \
         --renew-by-default \
         --agree-tos \
         --text \
         --standalone"

# Create $CERTGRP group 
if ! grep -q "^$CERTGRP:" /etc/group ; then
  groupadd -g 240 $CERTGRP
  echo ":: Added $CERTGRP group."
  sleep 3
fi

# Stop Apache
echo ":: Stopping Apache."
if ps ax | grep -v grep | grep httpd > /dev/null ; then
  /etc/rc.d/rc.httpd stop 1 > /dev/null 2&>1
  sleep 5
fi

$ENCRYPT $OPTIONS -d www.scholae.fr -d scholae.fr \
  --webroot-path /srv/httpd/vhosts/scholae-secure/htdocs

$ENCRYPT $OPTIONS -d mail.scholae.fr \
  --webroot-path /srv/httpd/vhosts/scholae-webmail/htdocs

$ENCRYPT $OPTIONS -d compta.scholae.fr \
  --webroot-path /srv/httpd/vhosts/scholae-compta/htdocs

# Fix permissions
echo ":: Setting permissions."
$CHGRP -R $CERTGRP /etc/letsencrypt
$CHMOD -R g=rx /etc/letsencrypt

# Start Apache
echo ":: Starting Apache."
/etc/rc.d/rc.httpd start
--8<--------------------------------------------------------------------------

Si l'on range ce script dans '/etc/cron.monthly/', les certificats sont
renouvelés tous les 1er du mois à 4h20 du matin. 


Révoquer un certificat
----------------------

Si jamais, pour une raison ou pour une autre, on a besoin de révoquer un
certificat, on peut le faire comme ceci :

  # cd /etc/letsencrypt/live/www.scholae.fr/
  # letsencrypt revoke --cert-path cert.pem


Effectuer des tests
-------------------

Les serveurs de Let's Encrypt sont actuellement soumis à des restrictions
assez sévères quant au nombre de comptes par IP et de certificats par domaine.
Si l'on souhaite uniquement se faire la main, on peut utiliser l'option
'--test-cert' pour générer des certificats "en bois" :

  # letsencrypt --test-cert certonly 


------------------------------------------------------------------------------
# vim: syntax=txt
