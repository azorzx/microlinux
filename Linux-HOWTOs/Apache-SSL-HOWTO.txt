================
Apache SSL HOWTO (c) Nicolas Kovacs <info@microlinux.fr>
================

Dernière révision : 25 septembre 2015

Ce HOWTO décrit la mise en place d'un site web sécurisé sur un serveur Apache
tournant sous Slackware.

  * Le protocole HTTPS
  * Le certificat
  * Configurer Apache et SSL
  * Plusieurs hébergements SSL sur un même serveur


Le protocole HTTPS
------------------

Le protocole HTTP ("Hypertext Transfer Protocol") transmet les données entre le
serveur et le navigateur "en clair". Les données personnelles, mots de passe et
autres numéros de Carte Bleue sont donc interceptables.

Pour résoudre ce problème, on utilisera le protocole HTTPS, qui ajoute une
couche de cryptage SSL ("Secure Sockets Layer") au protocole HTTP.

Le transfert crypté des données ne constitue qu'un aspect dans l'établissement
d'une connexion sécurisé. L'autre aspect tout aussi important, c'est que
l'utilisateur doit être sûr de communiquer avec la bonne personne. Autrement
dit, votre numéro de Carte Bleue a beau être transmis de façon sécurisée,
encore faut-il que la plateforme de paiement ne soit pas située sur un serveur
géré par la mafia albanaise. 

Pour savoir si l'on a bien affaire au bon interlocuteur, on utilisera un
certificat. Cette véritable carte d'identité électronique contient non
seulement la clé publique du serveur pour crypter les transmissions, mais
également des renseignements sur le site ainsi que la signature de l'autorité
de certification. 

Pour nos premiers essais, nous ne sommes pas obligés d'acheter un certificat,
et nous pouvons très bien fabriquer nous-mêmes notre certificat auto-signé.
Cette astuce nous permettra de mettre en place gratuitement notre propre
hébergement HTTPS. 

Le hic, c'est que les navigateurs courants comme Firefox ou Internet Explorer
n'acceptent que les certificats émanant d'autorités reconnues comme Verisign.
L'utilisateur qui se connectera à notre site HTTPS auto-certifié se retrouvera
confronté à un avertissement concernant l'identité du site, et c'est à lui de
décider s'il veut "confirmer une exception de sécurité". 

Enfin, le protocole HTTPS utilise le port 443. Il faut donc songer avant toute
chose à ouvrir ce port dans le pare-feu.

Dans l'exemple ci-dessous, nous allons configurer un hébergement HTTPS public :

  * https://slackbox.fr


Le certificat
-------------

La gestion des certificats SSL fait l'objet d'un HOWTO à part. À vous de
choisir si vous optez pour un certificat SSL auto-signé simple ou
multi-domaines, un certificat gratuit de chez StartSSL.com ou un certificat
payant. Dans tous les cas, nous nous retrouvons avec deux fichiers :

  * un fichier 'slackbox.fr.crt' dans '/etc/ssl/mycerts', avec un lien
    symbolique dans '/etc/ssl/certs' qui renvoie vers celui-ci ; 

  * un fichier 'slackbox.fr.key' dans '/etc/ssl/private'.

Pour les détails, voir ici :

  * SSL-Certificate-HOWTO.txt


Configurer Apache et SSL
------------------------

Notre hébergement HTTPS sera rangé en-dessous de '/var/www/vhosts/', dans le
répertoire 'slackbox-secure/htdocs'. Il faut donc créer cette arborescence
pour avoir quelque chose qui ressemble à ceci :

  # tree /var/www/vhosts/slackbox-secure/
  /var/www/vhosts/slackbox-secure/
  `-- htdocs
      |-- background.jpg
      |-- index.html
      |-- pingouin_ayo_small.gif
      `-- style.css

  1 directory, 4 files


Éditer le fichier '/etc/httpd/extra/httpd-ssl.conf' :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------
...
<VirtualHost 195.154.65.130:443>
DocumentRoot "/srv/httpd/vhosts/slackbox-secure/htdocs"
ServerName www.slackbox.fr:443
ServerAlias slackbox.fr:443
ServerAdmin postmaster@slackbox.fr
ErrorLog "/var/log/httpd/slackbox-secure_log"
TransferLog "/var/log/httpd/slackbox-secure_log"
SSLEngine on
SSLCertificateFile "/etc/ssl/certs/slackbox.fr.crt"
SSLCertificateKeyFile "/etc/ssl/private/slackbox.fr.key"
<FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
</FilesMatch>
<Directory "/srv/httpd/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>
BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0
CustomLog "/var/log/httpd/ssl_request_log" \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</VirtualHost>
--8<--------------------------------------------------------------------------

Activer SSL dans la configuration d'Apache :

--8<---------- /etc/httpd/httpd.conf -----------------------------------------
...
LoadModule socache_shmcb_module lib64/httpd/modules/mod_socache_shmcb.so
...
LoadModule ssl_module lib64/httpd/modules/mod_ssl.so
...
# Secure (SSL/TLS) connections
Include /etc/httpd/extra/httpd-ssl.conf
...
--8<--------------------------------------------------------------------------

  > Faire une recherche sur la chaîne de caractères "ssl" pour éditer le
    fichier.

Redémarrer Apache :

  # /etc/rc.d/rc.httpd restart

Ouvrir notre site sécurisé :

  * https://slackbox.fr


Plusieurs hébergements SSL sur un même serveur
----------------------------------------------

Dans cet exemple, nous allons héberger deux sites sécurisés sur le même
serveur :

  * https://www.slackbox.fr
  * https://www.unixbox.fr

Générer un certificat et une clé privée pour le domaine unixbox.fr. Au total,
on aura :

  * /etc/ssl/certs/unixbox.fr.crt -> ../mycerts/unixbox.fr.crt
  * /etc/ssl/mycerts/unixbox.fr.cnf
  * /etc/ssl/mycerts/unixbox.fr.crt
  * /etc/ssl/mycerts/unixbox.fr.csr
  * /etc/ssl/private/unixbox.fr.key

Éditer '/etc/httpd/extra/httpd-ssl.conf' et créer un deuxième hôte virtuel en
se basant sur le premier comme modèle :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------

...
# www.unixbox.fr
<VirtualHost 195.154.65.130:443>
DocumentRoot "/srv/httpd/vhosts/unixbox-secure/htdocs"
ServerName www.unixbox.fr:443
ServerAlias unixbox.fr:443
ServerAdmin postmaster@unixbox.fr
ErrorLog "/var/log/httpd/unixbox-secure_log"
TransferLog "/var/log/httpd/unixbox-secure_log"
SSLEngine on
SSLCertificateFile "/etc/ssl/certs/unixbox.fr.crt"
SSLCertificateKeyFile "/etc/ssl/private/unixbox.fr.key"
<FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
</FilesMatch>
<Directory "/srv/httpd/cgi-bin">
    SSLOptions +StdEnvVars
</Directory>
BrowserMatch "MSIE [2-5]" \
         nokeepalive ssl-unclean-shutdown \
         downgrade-1.0 force-response-1.0
CustomLog "/var/log/httpd/ssl_request_log" \
          "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
</VirtualHost>

...
--8<--------------------------------------------------------------------------

  /!\ Sur les anciennes versions d'Apache, il fallait ajouter une option
  générale pour la configuration des hôtes virtuels sécurisés :

--8<---------- /etc/httpd/extra/httpd-ssl.conf -------------------------------
...
Listen 443

SSLStrictSNIVHostCheck off
...
--8<--------------------------------------------------------------------------

Il ne reste qu'à redémarrer Apache.


------------------------------------------------------------------------------
# vim: syntax=txt
