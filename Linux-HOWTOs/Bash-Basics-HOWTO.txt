=================
Bash Basics HOWTO (c) Nicolas Kovacs <info@microlinux.fr>
=================

Dernière révision : 14 octobre 2015


  * Définition du shell
  * Commandes externes et internes
  * Affichage à l'écran
  * La commande interne 'cd'
  * Substitution de noms de fichiers
  * Expressions complexes
  * Séparateur de commandes
  * Redirections
  * Tubes de communication


Définition du shell
-------------------

Le shell est un programme ayant pour fonction d'assurer l'interface entre
l'utilisateur et le système Linux. C'est un interpréteur de commandes.

Plusieurs shells sont disponibles sur les plates-formes Linux.


Commandes externes et internes
------------------------------

Une commande Linux appartient à l'une des deux catégories suivantes :

  * commandes externes
  * commandes internes

Une commande externe est un fichier localisé dans l'arborescence. Par exemple,
lorsqu'un utilisateur lance la commande 'ls', le shell demande au noyau Linux
de charger en mémoire le fichier '/bin/ls'. 

Sont considérées comme commandes externes les fichiers possédant l'un des
formats suivants :

  * fichiers au format binaire exécutable
  * fichiers au format texte représentant un script de commandes

La commande 'file' donne une indication sur le type de données contenues dans
un fichier. L'argument de la commande 'file' est un nom de fichier exprimé en
relatif ou en absolu. Voici deux exemples.

La commande 'ls' est un fichier au format binaire exécutable :

  $ file /bin/ls
  /bin/ls: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically
  linked (uses shared libs), stripped

La commande 'gettext.sh' est un script shell :

  $ file /usr/bin/gettext.sh
  /usr/bin/gettext.sh: POSIX shell script, ASCII text executable

Une commande interne est intégrée au processus shell. Elle ne correspond donc
en aucun cas à un fichier sur le disque. 

La commande 'type' indique si une commande possède une implémentation interne.
Elle prend en argument le nom d'une commande. Si cette dernière n'est pas
interne, elle est recherchée dans les répertoires cités dans PATH. Voici deux
exemples.

La commande 'cd' est une commande interne :

  $ type cd
  cd est une primitive du shell

La commande 'ls' est une commande externe :

  $ type -a ls
  ls est un alias vers « ls --color=auto »
  ls est /usr/bin/ls
  ls est /bin/ls

  /!\ Ici on invoque l'option '-a' pour afficher les infos sur l'ensemble des
  exécutables nommés 'ls'. Pour plus d'infos, voir 'man bash'.

Certaines commandes ont une implémentation interne et une implémentation
externe. Dans ce cas, la commande interne est lancée en priorité. L'exécution
d'une commande interne est plus rapide que l'exécution d'une commande externe.

La commande 'pwd' est une commande interne au shell :

  $ type pwd
  pwd est une primitive du shell

Elle possède également une implémentation externe :

  $ type -a pwd
  pwd est une primitive du shell
  pwd est /usr/bin/pwd
  pwd est /bin/pwd
  $ ls -l /usr/bin/pwd
  lrwxrwxrwx 1 root root 13 avril 26 08:07 /usr/bin/pwd -> ../../bin/pwd

C'est la commande interne qui est exécutée en priorité :

  $ pwd
  /home/kikinovak

Pour forcer l'exécution de la commande externe, il faut indiquer explicitement
l'emplacement de la commande, en absolu ou en relatif :

  $ /usr/bin/pwd 
  /home/kikinovak
  $ cd /usr/bin/
  $ ./pwd 
  /usr/bin


Affichage à l'écran
-------------------

La commande interne 'echo' permet de réaliser des affichages à l'écran.

  $ echo Yatahongaga !
  Yatahongaga !

Certains caractères ont une signification spéciale lorsqu'ils sont placés
entre simples ou doubles quotes (apostrophes ou guillemets). Ce sont des
caractères d'échappement. 

  /!\ La commande 'echo' du shell Bash doit être utilisée avec l'option '-e'
  pour que l'interprétation des caractères d'échappement ait lieu. Pour plus
  de détails, voir 'man echo'.

Le caractère "\n" sert à provoquer un saut de ligne :

  $ echo -e "Première ligne\nDeuxième ligne\nTroisième ligne"
  Première ligne
  Deuxième ligne
  Troisième ligne

On peut également utiliser des apostrophes au lieu des guillemets :

  $ echo -e 'Première ligne\nDeuxième ligne\nTroisième ligne'
  Première ligne
  Deuxième ligne
  Troisième ligne

Le caractère "\c" sert à éliminer le saut de ligne naturel de la commande
'echo'. Il doit se situer impérativement en dernière position de l'argument de
'echo', juste avant le guillemet fermant. L'option '-e' est indispensable pour
l'interprétation du caractère d'échappement "\c".

  $ echo "Première ligne" ; echo "Deuxième ligne"
  Première ligne
  Deuxième ligne
  $ echo -e "Première ligne\c" ; echo -e "Deuxième ligne\c"
  Première ligneDeuxième ligne $ 

Alternativement, l'option '-n' peut remplacer le caractère "\c" :

  $ echo -n "Première ligne" ; echo -n "Deuxième ligne"
  Première ligneDeuxième ligne $ 

Le caractère "\t" permet d'afficher une tabulation :

  $ echo -e "|\tTab 1\tTab 2\tTab 3\tTab 4\t|"
  | Tab 1 Tab 2 Tab 3 Tab 4 |


La commande interne 'cd'
------------------------

La commande 'cd' sans argument permet à l'utilisateur de revenir dans son
répertoire d'accueil :

  $ cd 
  $ pwd
  /home/kikinovak

Même chose en utilisant le caractère '~', qui représente le répertoire
d'accueil de l'utilisateur courant :

  $ cd ~
  $ pwd
  /home/kikinovak

Se déplacer dans le répertoire d'accueil de l'utilisateur 'ftp' :

  $ cd ~ftp
  $ pwd
  /home/ftp

Revenir dans le répertoire précédent :

  $ cd -


Substitution de noms de fichiers
--------------------------------

De nombreuses commandes prennent des noms de fichiers en argument. Ces
derniers peuvent être cités littéralement ou être spécifiés de manière plus
générique. 

Le caractère "*" représente une suite de caractères quelconques. Voici
quelques exemples.

  $ ls
  f12  f1.i  FICa  fic.c  fic.s  monscript.pl  MONSCRIPT.pl  ours.c

  /!\ Pour créer tous ces fichiers, on pourra utiliser la commande 'touch'.

Afficher tous les noms de fichier se terminant par ".c" :

  $ ls *.c
  fic.c  ours.c

Afficher tous les noms de fichier commençant par la lettre "f" :

  $ ls f*
  f12  f1.i  fic.c  fic.s

Le caractère "?" représente un caractère quelconque. Voici quelques exemples.

Afficher tous les noms de fichier ayant une extension composée d'un seul
caractère :

  $ ls *.?
  f1.i  fic.c  fic.s  ours.c

Afficher tous les noms de fichier composés de quatre caractères :

  $ ls ????
  f1.i  FICa

Les crochets "[ ]" permettent de spécifier la liste des caractères que l'on
attend à une position bien précise dans le nom du fichier. Il est également
possible d'utiliser les notions d'intervalle et de négation. 

  /!\ Les exemples cités ci-dessous peuvent produire des résultats surprenants
  en fonction de certaines variables d'environnement. Dans le doute, on fera
  ceci :
    
    $ LANG=C
    $ LC_COLLATE=C

  Pour chacun des exemples, une alternative est donnée qui fonctionne
  parfaitement pour des variables d'environnement LANG et LC_COLLATE
  différentes, par exemple 'fr_FR.utf8'.

Fichiers dont le nom commence par "f" ou "o" et se termine par le caractère
"." suivi d'une minuscule :

  $ ls [fo]*.[a-z]
  f1.i  fic.c  fic.s  ours.c

Alternativement :

  $ ls [fo]*.[[:lower:]]
  f1.i  fic.c  fic.s  ours.c

Fichiers dont le nom comporte en deuxième caractère une majuscule ou un
chiffre ou la lettre "i". Les deux premiers caractères seront suivis d'une
chaîne quelconque :

  $ ls ?[A-Z0-9i]*
  FICa  MONSCRIPT.pl  f1.i  f12  fic.c  fic.s

Alternativement :

  $ ls ?[[:upper:]0-9i]*
  f12  f1.i  FICa  fic.c  fic.s  MONSCRIPT.pl

Il est également possible d'exprimer la négation de tous les caractères
spécifiés à l'intérieur d'une paire de crochets. Ceci se fait en plaçant un
"!" en première position à l'intérieur de celle-ci.

Noms de fichier ne commençant pas par une minuscule :

  $ ls [!a-z]*
  FICa  MONSCRIPT.pl

Alternativement :

  $ ls [![:lower:]]*
  FICa  MONSCRIPT.pl

Noms de fichier ne commençant pas par une majuscule :

  $ ls [!A-Z]*
  f1.i  f12  fic.c  fic.s  monscript.pl  ours.c

Alternativement :

  $ ls [![:upper:]]*
  f12  f1.i  fic.c  fic.s  monscript.pl  ours.c

Supprimer tous les fichiers dont le nom se termine par ".c" ou par ".s" :

  $ rm -i *.c *.s
  rm : supprimer fichier « fic.c » ? o
  rm : supprimer fichier « ours.c » ? o
  rm : supprimer fichier « fic.s » ? o


Expressions complexes
---------------------

Pour utiliser les expressions complexes en Bash, il faut préalablement activer
l'option 'extglob' avec la commande suivante :

  $ shopt -s extglob

Voici le contenu du répertoire qui sera utilisé dans les exemples suivants :

  $ ls
  fic               fic866866.log  fic866.log  fic868.log  readme.txt
  fic866866866.log  fic866868.log  fic867.log  fic.log     typescript

L'expression "?(expression)" sera présente 0 ou 1 fois.

Fichiers dont le nom commence par "fic" suivi de 0 ou 1 occurrence de "866",
suivi de ".log" :

  $ ls fic?(866).log
  fic866.log  fic.log

L'expression "*(expression)" sera présente entre 0 et n fois. 

Fichiers dont le nom commence par "fic", suivi de 0 à n occurrence(s) de
"866", suivi de ".log" :

  $ ls fic*(866).log
  fic866866866.log  fic866866.log  fic866.log  fic.log

L'expression "+(expression)" sera présente entre 1 et n fois.

Fichiers dont le nom commence par "fic", suivi d'au moins une occurrence de
"866", suivi de ".log" :

  $ ls fic+(866).log
  fic866866866.log  fic866866.log  fic866.log

L'expression "@(expression)" sera présente exactement 1 fois.

Fichiers dont le nom commence par "fic", suivi exactement d'une occurrence de
"866", suivi de ".log" :

  $ ls fic@(866).log
  fic866.log

L'expression "!(expression)" ne sera pas présente.

Fichiers dont le nom commence par "fic", suivi d'une expression qui n'est pas
la chaîne "866", suivi de ".log" :

  $ ls fic!(866).log
  fic866866866.log  fic866866.log  fic866868.log  fic867.log  fic868.log
  fic.log

Fichiers dont le nom ne commence pas par "fic" :

  $ ls !(fic*)
  readme.txt  typescript

Une barre verticale "|" à l'intérieur d'une expression complexe prend le sens
de "ou bien". 

Fichiers dont le nom commence par "fic", suivi de "866" ou "867", suivi de
".log" :

  $ ls fic@(866|867).log
  fic866.log  fic867.log

Fichiers dont le nom commence par "fic", suivi de 1 à n occurrence(s) de "866"
ou "868", suivi de ".log" :

  $ ls fic+(866|868).log
  fic866866866.log  fic866866.log  fic866868.log  fic866.log  fic868.log


Séparateur de commandes
-----------------------

Le caractère spécial ";" du shell permet d'écrire plusieurs commandes sur une
même ligne. Les commandes sont exécutées séquentiellement. 

  $ mkdir -v test ; cd test ; pwd
  mkdir: création du répertoire « test »
  /home/kikinovak/test


Redirections
------------

Les redirections sont couramment utilisées dans les commandes Unix. Elles
permettent :

  * de récupérer le résultat d'une ou plusieurs commandes dans un fichier ;
  * de faire lire un fichier à une commande.

Les processus Unix ont, par défaut, leur fichier terminal ouvert trois fois,
sous trois descripteurs de fichiers différents : 0, 1 et 2.

  0. Entrée standard du processus. Les processus qui attendent des
  informations de la part de l'utilisateur déclenchent une requête de lecture
  sur le descripteur 0. Si ce dernier est associé au terminal, cela se
  matérialise pour l'utilisateur par une demande de saisie au clavier.

  1. Sortie standard du processus. Par convention, un processus qui souhaite
  envoyer un message résultat à l'utilisateur doit le faire transiter via le
  descripteur 1. Si ce dernier est associé au terminal, ce qui est le cas par
  défaut, cela se matérialise pour l'utilisateur par un affichage à l'écran.

  2. Sortie d'erreur standard du processus. Par convention, un processus qui souhaite
  envoyer un message d'erreur à l'utilisateur doit le faire transiter via le
  descripteur 2. Si ce dernier est associé au terminal, ce qui est le cas par
  défaut, cela se matérialise pour l'utilisateur par un affichage à l'écran.

La redirection des sorties en écriture permet d'envoyer les affichages liés à
un descripteur particulier non plus sur le terminal, mais dans un fichier.

Syntaxe pour la simple redirection :

  $ commande 1> fichier

Alternativement :

  $ commande > fichier

Exemple :

  $ touch fichier{1,2,3}
  $ ls
  fichier1  fichier2  fichier3
  $ ls > liste
  $ cat liste 
  fichier1
  fichier2
  fichier3
  liste

Si le fichier n'existe pas, il est créé. S'il existe déjà, il est écrasé.

La double redirection permet de concaténer les messages résultant d'une
commande au contenu d'un fichier déjà existant :

  $ commande 1>> fichier

Ou bien :

  $ commande >> fichier

Si le fichier n'existe pas, il est créé. S'il existe déjà, il est ouvert en
mode ajout.

Dans l'exemple suivant, on va ajouter la date à la fin du fichier 'liste' créé
précédemment :

  $ date
  mar. oct. 13 08:51:28 CEST 2015
  $ date >> liste 
  $ cat liste 
  fichier1
  fichier2
  fichier3
  liste
  mar. oct. 13 08:51:32 CEST 2015

La redirection de la sortie d'erreur standard permet de récupérer les messages
d'erreur dans un fichier. Les résultats restent à l'écran.

  $ commande 2> fichier

Exemple :

  $ find / -name passwd 2> erreur
  /usr/bin/passwd
  /boot/initrd-tree/bin/passwd
  /boot/initrd-tree/etc/passwd
  /etc/passwd
  $ cat erreur 
  find: "/var/db/sudo": Permission non accordée
  find: "/var/cache/ldconfig": Permission non accordée
  find: "/var/spool/cron": Permission non accordée
  ...

Là encore, la double redirection de la sortie d'erreur standard permet de
concaténer les messages d'erreur d'une commande au contenu d'un fichier
existant.

  $ commande 2>> fichier

Dans l'exemple suivant, on va concaténer les messages d'erreur de la commande
invalide 'ls -z' à la fin du fichier 'erreur' :

  $ ls -z
  ls : option invalide -- 'z'
  Saisissez « ls --help » pour plus d'informations.
  $ ls -z 2>> erreur 
  $ cat erreur
  find: "/var/db/sudo": Permission non accordée
  find: "/var/cache/ldconfig": Permission non accordée
  ...
  find: "/etc/openvpn/keys": Permission non accordée
  find: "/etc/openvpn/certs": Permission non accordée
  ls : option invalide -- 'z'
  Saisissez « ls --help » pour plus d'informations.

Il est possible de rediriger plusieurs descripteurs sur une même ligne de
commande.

  $ commande 1> fichier_a 2> fichier_b

Ou encore :

  $ commande 2> fichier_b 1> fichier_a

Exemple :

  $ find / -name passwd 1> resultat 2> erreur
  $ cat resultat 
  /usr/bin/passwd
  /boot/initrd-tree/bin/passwd
  /boot/initrd-tree/etc/passwd
  /etc/passwd
  $ head -n 3 erreur 
  find: "/var/db/sudo": Permission non accordée
  find: "/var/cache/ldconfig": Permission non accordée
  find: "/var/spool/cron": Permission non accordée

L'option 'noclobber' du shell permet de se protéger d'un écrasement
involontaire de fichier. Elle est désactivée par défaut.

  $ set -o noclobber
  $ date > resultat 
  bash: resultat : impossible d'écraser le fichier existant

Pour forcer l'écrasement il faudra utiliser le symbole de redirection ">|" :

  $ date >| resultat 
  $ cat resultat 
  mar. oct. 13 09:16:30 CEST 2015

Et voici comment on réactive l'écrasement des fichiers :

  $ set +o noclobber

Toutes les plates-formes Unix possèdent un fichier spécial nommé '/dev/null'
qui permet de faire disparaître les affichages. Ce fichier est géré comme un
périphérique et n'a pas de notion de contenu. On peut donc considérer qu'il
est toujours vide. 

  $ find / -name passwd 1> resultat 2> /dev/null

La redirection de l'entrée standard concerne les commandes qui utilisent le
descripteur 0, autrement dit celles qui déclenchent une saisie au clavier.

  $ commande 0< fichier_message

Ou bien :

  $ commande < fichier_message

Dans l'exemple qui suit, on va envoyer un mail à l'utilisateur 'glagaffe'. 

  $ mail glagaffe
  Subject: RDV
  Rendez-vous au resto à 13h.
  Nico
  .
  EOT

  /!\ Pour mettre l'exemple ci-dessus en pratique, il faut que l'utilisateur
  'glagaffe' existe et que le serveur mail soit configuré pour la machine
  locale. Sur un système Slackware, on pourra faire ceci :

    # adduser glagaffe
    # chmod +x /etc/rc.d/rc.sendmail
    # /etc/rc.d/rc.sendmail start

  Et pour lire le mail :

    $ su - glagaffe
    $ mutt

La commande 'mail' lit l'entrée standard jusqu'à la saisie d'un point "." sur
une ligne. Les données saisies seront envoyées dans la boîte aux lettres de
l'utilisateur 'glagaffe'. 

Si l'on souhaite faire lire à la commande 'mail' non plus le clavier mais le
contenu d'un fichier, il suffit de connecter le descripteur 0 sur le fichier
désiré :

  $ cat message 
  RDV au resto à 13h.
  Nico
  $ mail -s "RDV" glagaffe < message 

Pour envoyer la sortie standard et la sortie d'erreur standard dans le même
fichier, il faut employer une syntaxe particulière :

  $ commande 1> fichier 2>&1

Ou bien :

  $ commande 2> fichier 1>&2

Reprenons l'exemple de tout à l'heure :

  $ find / -name passwd > resultat 2>&1
  $ cat resultat 
  find: "/home/glagaffe": Permission non accordée
  /usr/bin/passwd
  find: "/var/db/sudo": Permission non accordée
  find: "/var/cache/ldconfig": Permission non accordée
  find: "/var/spool/cron": Permission non accordée
  ...

La double redirection en lecture est principalement utilisée dans les scripts
shell. Elle permet de connecter l'entrée standard d'une commande sur une
portion du script.

  $ commande <<ETIQUETTE
  données
  données
  données
  ETIQUETTE

Le symbole placé à la suite des caractères "<<" est une déclaration
d'étiquette. Elle sera utilisée pour marquer la fin des données à lire. Les
lignes insérées entre les deux mots "ETIQUETTE" seront envoyées sur l'entrée
standard de la commande. Exemple :

  $ mail -s "RDV" glagaffe <<FIN
  > Rendez-vous à 13h au resto.
  > Nico.
  > FIN

  /!\ Les étiquettes doivent être immédiatement suivies d'un retour à la
  ligne.


Tubes de communication
----------------------

Un tube ("pipe" en anglais) permet de faire communiquer deux processus. Le
tube est représenté par une barre verticale "|" située entre deux commandes
Unix. Le résultat de la commande de gauche va partir dans le tube, tandis que
la commande de droite va en extraire les données afin de les traiter. 

Dans l'exemple qui suit, on va envoyer par mail la liste des utilisateurs
connectés à la machine :

  $ who | mail -s "Utilisateurs connectés" glagaffe

La sortie d'erreur standard de la commande de gauche ne part pas dans le tube. 

Pour que l'utilisation d'un tube ait un sens, il faut que la commande placée à
gauche du tube envoie des données sur sa sortie standard et que la commande
placée à droite lise son entrée standard.

Un certain nombre de commandes Unix n'ont aucun intérêt à être placées
derrière un tube, car elles n'exploitent pas leur entrée standard : ls, who,
find, chmod, cp, mv, rm, ln, mkdir, rmdir, date, kill, type, echo, etc.

Les commandes qui lisent leur entrée standard sont facilement identifiables,
étant donné qu'elles demandent une saisie au clavier :

  $ mail glagaffe
  Subject: ...
  ...

Sous Unix, un certain nombre de commandes sont regroupées sous le nom de
filtres : grep, cat, sort, cut, wc, lp, sed, awk, etc. Ces commandes peuvent
fonctionner de deux manières.

Si la commande reçoit au moins un nom de fichier en argument, elle traite
le(s) fichier(s) et ne déclenche pas de lecture de l'entrée standard :

  $ wc -l /etc/passwd
  26 /etc/passwd

La commande ne reçoit aucun nom de fichier en argument. Dans ce cas, la
commande traite les données qui arrivent sur son entrée standard. Dans
l'exemple qui suit la commande 'wc' ("word count") compte le nombre de lignes
qui arrivent sur son entrée standard et affiche le résultat sur la sortie
standard. Pour terminer la saisie, appuyer sur [Ctrl]+[D] :

  $ wc -l
  Première ligne
  Deuxième ligne
  Troisième ligne
  3

Il est donc possible de placer cette commande derrière un tube : 

  $ who | wc -l
  4

Comment savoir si une commande lit son entrée standard ? Pour répondre à cette
question, considérons deux exemples.

Voici une commande qui traite un fichier. Elle ne déclenche pas de lecture de
l'entrée standard :

  $ cut -d':' -f1,3 /etc/passwd
  root:0
  bin:1
  daemon:2
  ...

La même commande sans le nom de fichier attend une saisie au clavier :

  $ cut -d':' -f1,3
  1:2:3:4
  1:3
  10:20:30:40
  10:30
  100:200:300:400
  100:300

Cette commande peut donc être placée derrière un tube :

  $ echo "1:2:3:4" | cut -d':' -f1,3
  1:3

La majorité des commandes ne se soucient pas de savoir si elles sont placées
derrière une tube ou non. Pour une commande donnée, l'action sera toujours la
même. Dans l'exemple qui suit, 'wc -l' lit son entrée standard dans les deux
cas :

  $ wc -l
  $ who | wc -l

Quelques commandes font exception à la règle. Elles testent si leur entrée
standard est connectée sur la sortie d'un tube ou sur un terminal. Dans
l'exemple qui suit, la commande 'more' reçoit un nom de fichier en argument et
pagine son contenu à l'écran. Elle ne lit pas son entrée standard :

  $ more /etc/passwd
  root:x:0:0::/root:/bin/bash
  bin:x:1:1:bin:/bin:/bin/false
  daemon:x:2:2:daemon:/sbin:/bin/false
  ...

Sans le nom de fichier, la commande affiche un message d'erreur :

  $ more
  Utilisation : more [options] fichier ...

Le nom du fichier peut être omis lorsque 'more' est placée à droite d'un tube.
Dans ce cas, la commande lit son entrée standard et pagine les lignes qu'elle
y extrait :

  $ cat /etc/passwd | more
  root:x:0:0::/root:/bin/bash
  bin:x:1:1:bin:/bin:/bin/false
  daemon:x:2:2:daemon:/sbin:/bin/false
  ...

Il est possible d'enchaîner plusieurs tubes sur une ligne de commande. Dans
l'exemple qui suit, on affiche le nombre de connexions d'un utilisateur :

  $ who | grep kikinovak | wc -l
  4

On peut également dupliquer les sorties grâce à la commande 'tee'. Elle permet
de visualiser un résultat à l'écran tout en la conservant dans un fichier :

  $ ls | tee liste.txt
  fichier.log
  readme.txt
  typescript
  $ cat liste.txt 
  fichier.log
  readme.txt
  typescript

Le résultat de la commande 'date' est affiché à l'écran et concaténé au
fichier 'liste.txt' existant :

  $ date | tee -a liste.txt 
  mer. oct. 14 10:43:16 CEST 2015
  $ cat liste.txt 
  fichier.log
  readme.txt
  typescript
  mer. oct. 14 10:43:16 CEST 2015

La commande suivante affiche un message d'erreur et une ligne de résultat :

  $ ls -l t* Z*
  ls: impossible d'accéder à Z*: Aucun fichier ou dossier de ce type
  -rw-r--r-- 1 kikinovak users 0 oct.  12 09:28 typescript

Seule la sortie standard passe dans le tube :

  $ ls -l t* Z* | tee liste.txt 
  ls: impossible d'accéder à Z*: Aucun fichier ou dossier de ce type
  -rw-r--r-- 1 kikinovak users 0 oct.  12 09:28 typescript
  $ cat liste.txt 
  -rw-r--r-- 1 kikinovak users 0 oct.  12 09:28 typescript

Voici ce qu'il faut faire pour envoyer la sortie standard et la sortie
d'erreur standard dans le tube :

  $ ls -l t* Z* 2>&1 | tee liste.txt 
  ls: impossible d'accéder à Z*: Aucun fichier ou dossier de ce type
  -rw-r--r-- 1 kikinovak users 0 oct.  12 09:28 typescript
  $ cat liste.txt 
  ls: impossible d'accéder à Z*: Aucun fichier ou dossier de ce type
  -rw-r--r-- 1 kikinovak users 0 oct.  12 09:28 typescript


------------------------------------------------------------------------------
# vim: syntax=txt
